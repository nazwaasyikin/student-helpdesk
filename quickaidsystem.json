import azure.functions as func
from azure.cosmos import CosmosClient
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from datetime import datetime
import os
import json
import logging
import uuid

app = func.FunctionApp(http_auth_level=func.AuthLevel.ANONYMOUS)

# -------------------------
# POST: Submit Ticket
# -------------------------
@app.route(route="submitTicket", methods=["POST"])
def submitTicket(req: func.HttpRequest) -> func.HttpResponse:
    try:
        # Parse request body
        data = req.get_json()

        # Validate required fields
        required_fields = [
            "studentId",
            "student_name",
            "student_email",
            "category",
            "subject",
            "description",
            "location"
        ]
        if not all(field in data for field in required_fields):
            return func.HttpResponse("Missing required fields", status_code=400)

        # Malaysia time
        now = datetime.now()
        created_date = now.strftime("%Y-%m-%d")
        created_time = now.strftime("%H:%M:%S")

        # Generate UUID for ticket ID
        ticket_id = str(uuid.uuid4())

        # Prepare ticket data
        ticket = {
            "id": ticket_id,
            "studentId": data["studentId"],
            "student_name": data["student_name"],
            "student_email": data["student_email"],
            "category": data["category"],
            "subject": data["subject"],
            "description": data["description"],
            "location": data["location"],
            "status": "Open",
            "created_date": created_date,
            "created_time": created_time
        }

        # Cosmos DB configuration
        conn_str = os.environ["COSMOS_DB_CONN_STRING"]
        database_name = "QuickAidSystemDB"
        container_name = "Tickets"

        client = CosmosClient.from_connection_string(conn_str)
        container = client.get_database_client(database_name).get_container_client(container_name)

        # Insert item into Cosmos DB
        container.create_item(ticket)

        # Send confirmation email via SendGrid
        sendgrid_key = os.environ["SENDGRID_API_KEY"]
        sg = SendGridAPIClient(api_key=sendgrid_key)

        message = Mail(
            from_email="radinnazhan@graduate.utm.my",
            to_emails=ticket["student_email"],
            subject="Ticket Submitted Successfully",
            html_content=f"""
                <p>Dear {ticket['student_name']},</p>
                <p>Your ticket has been submitted successfully.</p>
                <ul>
                    <li><strong>Ticket ID:</strong> {ticket['id']}</li>
                    <li><strong>Category:</strong> {ticket['category']}</li>
                    <li><strong>Subject:</strong> {ticket['subject']}</li>
                    <li><strong>Status:</strong> {ticket['status']}</li>
                    <li><strong>Submitted on:</strong> {ticket['created_date']} {ticket['created_time']} (MYT)</li>
                </ul>
                <p>Thank you.</p>
            """
        )
        sg.send(message)

        logging.info(f"Ticket {ticket_id} submitted and email sent.")

        return func.HttpResponse(
            json.dumps({"message": "Ticket submitted successfully", "id": ticket_id}),
            status_code=201,
            mimetype="application/json"
        )

    except Exception as e:
        logging.error(f"Error submitting ticket: {e}")
        return func.HttpResponse("Internal server error", status_code=500)


# -------------------------
# GET: Retrieve Ticket
# -------------------------
@app.route(route="getTicket", methods=["GET"])
def getTicket(req: func.HttpRequest) -> func.HttpResponse:
    try:
        ticket_id = req.params.get("ticket_id")
        if not ticket_id:
            return func.HttpResponse("Missing ticket_id parameter", status_code=400)

        # Cosmos DB configuration
        conn_str = os.environ["COSMOS_DB_CONN_STRING"]
        database_name = "QuickAidSystemDB"
        container_name = "Tickets"

        client = CosmosClient.from_connection_string(conn_str)
        container = client.get_database_client(database_name).get_container_client(container_name)

        # Query ticket by ID
        query = "SELECT * FROM c WHERE c.id = @ticket_id"
        parameters = [{"name": "@ticket_id", "value": ticket_id}]

        items = list(container.query_items(
            query=query,
            parameters=parameters,
            enable_cross_partition_query=True
        ))

        if not items:
            return func.HttpResponse("Ticket not found", status_code=404)

        logging.info(f"Retrieved ticket {ticket_id}")
        return func.HttpResponse(
            json.dumps(items[0]),
            status_code=200,
            mimetype="application/json"
        )

    except Exception as e:
        logging.error(f"Error retrieving ticket: {e}")
        return func.HttpResponse("Internal server error", status_code=500)
